PROBLEM STATEMENT:
Given an weighted graph with V vertices numbered from 0 to V-1 and E edges, represented by a 2d array edges[][], where edges[i] = [u, v, w] represents a direct edge from node u to v having w edge weight. You are also given a source vertex src.

Your task is to compute the shortest distances from the source to all other vertices. If a vertex is unreachable from the source, its distance should be marked as 108. Additionally, if the graph contains a negative weight cycle, return [-1] to indicate that shortest paths cannot be reliably computed.



SOLUTION:

                                                                                                TIME COMPLEXITY: O(V Ã— E)
                                                                                                SPACE COMPLEXITY: o(v)

// User function Template for Java

class Solution {
    public int[] bellmanFord(int V, int[][] edges, int src) {
        
        int[] dist= new int[V];
        for(int i=0; i<V; i++){
            dist[i]= 100000000;
        }
        dist[src]=0;
        for(int i=0; i<V-1; i++){
            for(int j=0; j<edges.length; j++){
                int u= edges[j][0];
                int v= edges[j][1];
                int w= edges[j][2];
                if(dist[u]!= 100000000 && dist[u]+w < dist[v]){
                    dist[v]= dist[u]+w;
                }
            }
        }
        
        //checking for nth iteration to test negative cycle
        for(int i=0; i<edges.length; i++){
            int u= edges[i][0];
            int v= edges[i][1];
            int w= edges[i][2];
            if(dist[u]!= 100000000 && dist[u]+w < dist[v]){
                return new int[]{-1};
            }
        }
        
        return dist;
        
    }
}
