PROBLEM STATEMENT:
Given start, end and an array arr of n numbers. At each step, start is multiplied with any number in the array and then mod operation with 100000 is done to get the new start.

Your task is to find the minimum steps in which end can be achieved starting from start. If it is not possible to reach end, then return -1.

SOLUTION:
                                                                                      TIME COMPLEXITY: O(100000 Ã— M)

                                                                                      SPACE COMPLEXITY:  O(100000)

// User function Template for Java

class Solution {
    int minimumMultiplications(int[] arr, int start, int end) {

        // Your code here
        int[] dis= new int[100000];
        Queue<Pair> q= new LinkedList<>();
        
        for(int i=0; i<dis.length; i++){
            dis[i]= Integer.MAX_VALUE;
        }
        dis[start]=0;
        q.add(new Pair(0,start));
        
        while(!q.isEmpty()){
            Pair p= q.poll();
            int steps= p.steps;
            int node= p.num;
            if(node==end)   return steps;
            for(int i=0; i<arr.length; i++){
                int newNode= (arr[i]*node)%100000;
                if(steps+1 < dis[newNode]){
                    dis[newNode]= steps+1;
                    q.add(new Pair(steps+1, newNode));
                }
            }
        }
        
        return -1;
        
    }
}
class Pair{
    int steps;
    int num;
    Pair(int steps, int num){
        this.steps= steps;
        this.num=num;
    }
}
