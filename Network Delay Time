PROBLEM STATEMENT:

You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1

SOLUTION:
  
                                                                                          TIME COMPLEXITY: O((V + E) log V)
                                                                                          SPACE COMPLEXITY: O(V + E)

class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {

        //preparing adjacency list
        List<List<Pair>> adjList= new ArrayList<>();
        for(int i=0; i<=n; i++){
            adjList.add(new ArrayList<>());
        }

        for(int i=0; i<times.length; i++){
            int src= times[i][0];
            int dest= times[i][1];
            int wt= times[i][2];
            adjList.get(src).add(new Pair(wt, dest));
        }
        
        PriorityQueue<Pair> pq= new PriorityQueue<Pair>((x,y)-> x.time- y.time);
        int[] dist= new int[n+1];
        for(int i=0; i<=n; i++){
            dist[i]= Integer.MAX_VALUE;
        }
        dist[k]=0;
        pq.add(new Pair(0,k));

        while(!pq.isEmpty()){
            Pair p= pq.poll();
            int time= p.time;
            int node= p.node;
            for(Pair adj: adjList.get(node)){
                int adjTime= adj.time;
                int adjNode= adj.node;
                if(adjTime+time < dist[adjNode]){
                    dist[adjNode]= adjTime+time;
                    pq.add(new Pair(dist[adjNode], adjNode)); 
                }
            }
        }

        int res=0;
        for(int i=1; i<=n; i++){
            res= Math.max(res, dist[i]);
     
        }
        return res==Integer.MAX_VALUE ? -1: res;
    }
}
class Pair{
    int time;
    int node;
    Pair(int time, int node){
        this.time= time;
        this.node= node;
    }
}
