PROBLEM STATEMENT:
You are given a two-dimensional array/list of integers consisting of 0s and 1s. In the list, 1 represents land and 0 represents water.

The task is to find the number of distinct islands where a group of connected 1s(horizontally or vertically) forms an island.

Note:
Two islands are considered to be the same if and only if one island is equal to another(not rotated or reflected) i.e if we can translate one island on another without rotating or reflecting then it would be considered as the same islands. 

SOLUTION:
                                                                                          USING DFS
                                                                                TIME COMPLEXITY: O(n × m + (n × m) log(n × m))
                                                                                          SPACE COMPLEXITY: O(n × m)

import java.util.*;

public class Solution 
{
	public static int distinctIsland(int [][] arr, int n, int m) 
	{
		boolean[][] vis= new boolean[n][m];
		HashSet<String> set= new HashSet<>();

		int[] drow={0, 1, 0,  -1};
		int[] dcol= {1, 0, -1, 0};

		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				if(arr[i][j]==1 && vis[i][j]==false){
					String newShape= bfs(i,j,arr, vis,drow, dcol,n,m);
					set.add(newShape);
				}
			}
		}

		return set.size();

	}

	public static String bfs(int startrow, int startcol, int[][] arr, boolean[][] vis, int[]drow, int[] dcol, int n, int m){

		vis[startrow][startcol]= true;
		Queue<int[]> q= new LinkedList<>();

		q.add(new int[]{startrow, startcol});

		List<String> pos= new ArrayList<>();

		while(!q.isEmpty()){
			int[] cell= q.poll();
			int row= cell[0];
			int col= cell[1];

			pos.add((row-startrow)+"_"+(col-startcol));

			for(int i=0; i<4; i++){
				int nrow= row+drow[i];
				int ncol= col+dcol[i];
				if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==false && arr[nrow][ncol]==1){
					vis[nrow][ncol]=true;
					q.add(new int[]{nrow, ncol});
				}
			}
		}

		Collections.sort(pos);
		return String.join(",",pos);
	}
}
