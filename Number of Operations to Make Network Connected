PROBLEM STATEMENT:
There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network.

You are given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.

Return the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.

SOLUTION:

                                                                                                USING DISJOINT SET
                                                                                          TIME COMPLEXITY: O(n + m)
                                                                                          SPACE COMPLEXITY: O(n)
class Solution {
    public int makeConnected(int n, int[][] connections) {
        DisjointSet dis= new DisjointSet(n);
        int extra=0;
        for(int i=0; i<connections.length; i++){
            int u= connections[i][0];
            int v= connections[i][1];
            
            if(dis.findUPar(u)== dis.findUPar(v))   extra++;
            else{
                dis.unionByRank(u,v);
            }
        }
        int comp=0;
        for(int i=0; i<n; i++){
            if(dis.parent.get(i)==i)    comp++;
        }

        if(extra>=comp-1)   return comp-1;
        else    return -1;

    }
}
class DisjointSet{
    List<Integer> parent= new ArrayList<>();
    List<Integer> rank= new ArrayList<>();
    
    public DisjointSet(int n){
        for(int i=0; i<n; i++){
            parent.add(i);
            rank.add(0);
        }
    }
    
    public int findUPar(int node){
        if(node==parent.get(node))  return node;
        int ulp= findUPar(parent.get(node));
        parent.set(node, ulp);
        
        return ulp;
    }
    
    public void unionByRank(int u, int v){
        int ulp_u= findUPar(u);
        int ulp_v= findUPar(v);
        
        if(ulp_u == ulp_v)  return;
        
        if(rank.get(ulp_u) < rank.get(ulp_v)){
            parent.set(ulp_u, ulp_v);
        }
        else if(rank.get(ulp_v)<rank.get(ulp_u)){
            parent.set(ulp_v, ulp_u);
        }
        else{
            parent.set(ulp_v, ulp_u);
            int rankU= rank.get(ulp_u);
            rank.set(ulp_u, rankU+1);
        }
    }
}
