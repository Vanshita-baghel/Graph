PROBLEM STATEMENT:
You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

SOLUTION:

class Solution{
    public int orangesRotting(int[][] grid){
        int n= grid.length;
        int m= grid[0].length;

        int[][] vis= new int[n][m];
        Queue<Pair> q= new LinkedList<>();
        int cntFresh=0;

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]==2){
                    vis[i][j]= 2;
                    q.add(new Pair(i,j,0));
                }
                else vis[i][j]= 0;

                if(grid[i][j]==1)   cntFresh++;
            }
        }
        int drow[] = {-1, 0, 1, 0};
        int dcol[] = {0, 1, 0, -1};
        int cnt=0;
        int tm=0;

        while(!q.isEmpty()){
            int row= q.peek().first;
            int col= q.peek().second;
            int t= q.peek().time;
            tm= Math.max(tm, t);

            q.remove();

            for(int i=0; i<4; i++){
                int nrow= row+ drow[i];
                int ncol= col+ dcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==0 && grid[nrow][ncol]==1){
                    q.add(new Pair(nrow, ncol, t+1));
                    vis[nrow][ncol]=2;
                    cnt++;
                }
            }

        }
        if(cnt!= cntFresh)  return -1;
        return tm;

    }
}
class Pair{
    int first;
    int second;
    int time;
    Pair(int first, int second, int time){
        this.first= first;
        this.second= second;
        this.time= time;
    }
}
