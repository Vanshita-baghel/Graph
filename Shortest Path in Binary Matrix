PROBLEM STATEMENT:
Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

SOLUTION:

                                                                                          time complexity: O(n²)
                                                                                          space complexity: O(n²)
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        
        int n= grid.length;
        Queue<Pair> q= new LinkedList<>();
        int[][] vis= new int[n][n];

        if(grid[0][0]==0){
            q.add(new Pair(0,0,0));
            vis[0][0]=1;
        }
        
        int[] drow={-1,-1,-1,0,0,1,1,1};
        int[] dcol= {-1,0,1,1,-1,-1,0,1};

        while(!q.isEmpty()){
            Pair p= q.poll();
            int row= p.first;
            int col= p.second;
            int dist= p.third;
            if(row== n-1 && col==n-1)   return dist+1;
            for(int i=0; i<8; i++){
                int nrow= row+drow[i];
                int ncol= col+dcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<n && grid[nrow][ncol]==0 && vis[nrow][ncol]!=1){
                    q.add(new Pair(nrow, ncol,dist+1));
                    vis[nrow][ncol]=1;
                }
            }
        }
        return -1;
    }
}
class Pair{
    int first;
    int second;
    int third;
    Pair(int first, int second, int third){
        this.first= first;
        this.second= second;
        this.third= third;
    }
}
