PROBLEM STATEMENT:
There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some servers unable to reach some other server.

Return all critical connections in the network in any order.

solution:

                                                                                        TIME COMPLEXITY: O(V+E)
                                                                                        SPACE COMPLEXITY: O(V+E)

class Solution {
    //tarjans algorithm
    int timer=1;
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        List<List<Integer>> adj= new ArrayList<>();
        for(int i=0; i<n; i++){
            adj.add(new ArrayList<>());
        }
        for(List<Integer> edge: connections){
            int u= edge.get(0);
            int v= edge.get(1);
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        int[] vis= new int[n];
        int[] tin= new int[n];
        int[] low= new int[n];
        List<List<Integer>> bridges= new ArrayList<>();
        dfs(0,-1, vis, adj, tin, low, bridges);
        return bridges;
    }
    public void dfs(int node, int parent, int[] vis, List<List<Integer>> adj, int[] tin, int[] low, List<List<Integer>> bridges){
        vis[node]=1;
        low[node]= tin[node]= timer;
        timer++;
        for(Integer it:adj.get(node)){
            if(it==parent)  continue;
            if(vis[it]==0){
                dfs(it, node,vis,adj,tin,low,bridges);
                low[node]= Math.min(low[node],low[it]);
                if(low[it]>tin[node]){
                    bridges.add(Arrays.asList(it, node));
                }
            }
            else{
                low[node]= Math.min(low[node], low[it]);
            }
        }
    }
}
