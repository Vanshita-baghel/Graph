PROBLEM STATEMENT:
Given an undirected graph with V vertices and E edges, represented as a 2D vector edges[][], where each entry edges[i] = [u, v] denotes an edge between vertices u and v,
determine whether the graph contains a cycle or not. The graph can have multiple component.

SOLUTION:

                                                                            USING BFS
                                                                          TIME COMPLEXITY: O(V + E)
                                                                          SPACE COMPLEXITY: O(V + E)
class Solution {
    public boolean isCycle(int V, int[][] edges) {
        
        //preparing adjacency list
        List<List<Integer>> adjList= new ArrayList<>();
        for(int i=0; i<V; i++){
                adjList.add(new ArrayList<>());
        }
        
        for(int[] edge : edges){
            int u= edge[0], v= edge[1];
            adjList.get(u).add(v);
            adjList.get(v).add(u);
        }
        
        boolean vis[] = new boolean[V];
        
        for(int i=0; i<V; i++){
            if(!vis[i]){
                if(bfs(i, adjList, vis))    return true;
            }
        }
        
        return false;
        
    }
    public boolean bfs(int i, List<List<Integer>> adjList, boolean[] vis){
        
        Queue<Pair> q=new LinkedList<>();
        vis[i]= true;
        q.add(new Pair(i,-1));
        
        while(!q.isEmpty()){
            int node= q.peek().node;
            int parent= q.peek().parent;
            q.poll();
            
            for(int neighbour: adjList.get(node)){
                if(!vis[neighbour]){
                    vis[neighbour]= true;
                    q.add(new Pair(neighbour, node));
                } 
                else if(neighbour!= parent) return true;
            }
        }
        return false;
    }
}
class Pair{
    int node;
    int parent;
    Pair(int node, int parent){
        this.node= node;
        this.parent= parent;
    }
}

                                                                            USING DFS
                                                                          TIME COMPLEXITY: O(V + E)
                                                                          SPACE COMPLEXITY: O(V + E)

class Solution {
    //using dfs
    
    public boolean isCycle(int V, int[][] edges) {
        
        //preparing adjacency list
        List<List<Integer>> adjList= new ArrayList<>();
        for(int i=0; i<V; i++){
                adjList.add(new ArrayList<>());
        }
        
        for(int[] edge : edges){
            int u= edge[0], v= edge[1];
            adjList.get(u).add(v);
            adjList.get(v).add(u);
        }
        
        boolean[] vis= new boolean[V];
        
        for(int i=0; i<V; i++){
            if(!vis[i]){
                if(dfs(i, -1, adjList, vis))    return true;
            }
        }
        
        return false;
        
    }
    public boolean dfs(int node, int parent, List<List<Integer>> adjList, boolean[] vis){
        vis[node]= true;
        for(int neighbour: adjList.get(node)){
            if(!vis[neighbour]){
                if(dfs(neighbour, node, adjList, vis))  return true;
            }
            else if(neighbour != parent)    return true;
        }
        
        return false;
        
    }
}
